##############################################
##
## Basic OpenSIPS configuration example.
## With NAT, with auth.
## 
## Author: Anton Raharja <anton@itmn.co.id>
## Update: 1604061400
##
##############################################



############ Global Parameters ###############
 
debug=4
log_stderror=no
log_facility=LOG_LOCAL0
fork=yes
children=10
auto_aliases=no

listen=udp:192.168.2.2:5060		# CUSTOMIZE ME

disable_tcp=no
listen=tcp:192.168.2.2:5060		# CUSTOMIZE ME

disable_tls=yes

 
 
############### Modules Section ###############

mpath="/usr/local/lib64/opensips/modules/"

loadmodule "signaling.so"

loadmodule "sl.so"

loadmodule "maxfwd.so"

loadmodule "sipmsgops.so"

loadmodule "tm.so"
modparam("tm", "onreply_avp_mode", 1)

loadmodule "rr.so"

loadmodule "db_mysql.so"

loadmodule "auth.so"

loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "db_url", "mysql://dbusername:dbpassword@localhost/opensips")	# CUSTOMIZE ME

loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "db_url", "mysql://dbusername:dbpassword@localhost/opensips")	# CUSTOMIZE ME
 
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(received_nh)")

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 15)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "received_avp", "$avp(received_nh)")

loadmodule "mediaproxy.so"
modparam("mediaproxy", "media_relay_avp", "$avp(media_relay)")

loadmodule "dialog.so"

loadmodule "options.so"



############### Routing Logic ###############

route {
	#xlog("L_INFO", "[LOG] Enter script. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");

	# protection againts abnormal routing
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");

		exit;
	}

	# protection againts abnormal size requests
	if (msg:len >=  2048) {
		sl_send_reply("513", "Message Too Big");

		exit;
	}
	
	# check if uac under NAT router
	if (nat_uac_test("31")) { 
		if (is_method("REGISTER")) {
			fix_nated_register(); 
		} else {
			fix_nated_contact(); 
		}

		force_rport();
		setbflag(NAT);

		xlog("L_INFO", "[LOG] NATed. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");
	}

	# check if we're already in transaction
	if (has_totag()) {
		if (loose_route()) {
			if (is_method("BYE")) {
				if (isbflagset(NAT)) {
					end_media_session();
				}

				xlog("L_INFO", "[LOG] BYE. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");
			}

			route(relay);
		} else {
			if (is_method("ACK")) {
				if (t_check_trans()) {
					xlog("L_INFO", "[LOG] ACK. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");
					
					t_relay();

					exit;
				} else {
					exit;
				}
			}
		}
	}

	# the "to" has no tag it could be a new INVITE

	# immediately handle cancel and bye
	if (is_method("CANCEL|BYE")) {
		if (t_check_trans()) {
			t_relay();
		}
		
		exit;
	}

	# proxy authenticate for INVITEs
	if (is_method("INVITE")) {
		if (!proxy_authorize("", "subscriber")) {
        		proxy_challenge("", "0");

        		exit;
 		}

		if (!db_check_from()) {
			xlog("L_INFO", "[LOG] PROXY AUTH FORBIDDEN. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");

        		sl_send_reply("403","Forbidden");
		}

		consume_credentials();

		xlog("L_INFO", "[LOG] PROXY AUTHENTICATED. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");
	}

	# do record routing, starts a dialog
	if (!is_method("REGISTER|MESSAGE")) {
		record_route();
	}

	# UA register
	if (is_method("REGISTER")) {
		if (!www_authorize("", "subscriber")) {
                	www_challenge("", "0");

                	exit;
         	}
	        
		if (!db_check_to()) {
			xlog("L_INFO", "[LOG] REGISTER FORBIDDEN. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");

        		sl_send_reply("403","Forbidden");
         	}

         	if (!save("location")) {
                	sl_reply_error();
         	}

		if (proto==TCP || proto==TLS) {
			setflag(TCP_PERSISTENT);
		}

		xlog("L_INFO", "[LOG] REGISTERED. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");

		exit;
	}
	
	# handle SIP OPTIONS that is coming/for to us (we're not proxying it)
	if (uri==myself) {
		if ((is_method("OPTIONS")) && (! uri=~"sip:.*[@]+.*")) {
			#xlog("L_INFO", "[LOG] OPTIONS replied. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");
			options_reply();
		}
	}

	# example to remove plus sign prefix
	if ($rU =~ "^\+") {
		strip(1);
	}

	# example to forward prefix-matched INVITE request URI to appropriate gateway
	if (($rU =~ "^62520[0-9]{4}") || ($rU =~ "^0520[0-9]{4}")) {
		if (is_method("INVITE")) {
			rewritehost("sip.teleponrakyat.id");
			
			xlog("L_INFO", "[LOG] FWD TO TELEPONRAKYAT [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");

			route(relay);
		}
	}

	# do lookup on database, see if callee is online
	if (!lookup("location","m")) {
		
		# callee is not online
	
		if (is_method("INVITE")) {
			t_newtran();

			xlog("L_INFO", "[LOG] INVITE not found. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");

			t_reply("404", "Not Found");
		}
		
		exit();
	}

       	route(relay);

    	#xlog("L_INFO", "[LOG] Exit script. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");
}

route[relay] {
	if (is_method("INVITE")) {
		xlog("L_INFO", "[LOG] INVITE start. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]");

		if (isbflagset(NAT)) {
			if (has_body("application/sdp")) {
			
				# example if decided to use certain relay
				#$avp(media_relay) = '202.153.128.34';
				
				use_media_proxy();
			}
		}
	
		t_on_branch("handle_branch");
		t_on_reply("handle_reply");
		t_on_failure("handle_failure");

	}

	if (isbflagset(NAT)) {
		add_rr_param(";nat=yes");
	}

	if (!t_relay()) {
		send_reply("500","Server Internal Error");
	}

	exit;
}

branch_route[handle_branch] {
	xlog("L_INFO", "[LOG] New branch. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]\n");
}

onreply_route[handle_reply] {
	if (nat_uac_test("1")) {
		fix_nated_contact();
	}

	if (isbflagset(NAT) ) {
		if (has_body("application/sdp")) {
			use_media_proxy();
		}
	}

	if (is_method("INVITE")) {
		xlog("L_INFO", "[LOG] re-INVITE. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]\n");
	}
}

failure_route[handle_failure] {
	xlog("L_INFO", "[LOG] Failure relay. [rm:$rm] [fu:$fu] [ou:$ou] [ru:$ru] [si:$si]\n");

        if (t_was_cancelled()) {

                exit;
        }

        if (t_check_status("3[0-9][0-9]")) {
                t_reply("404","Not Found");

                exit;
        }
}
